/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package datastore;

import com.codahale.metrics.ConsoleReporter;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Timer;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.org.somak.datastore.client.*;
import com.org.somak.datastore.client.dto.Customer;
import com.org.somak.datastore.client.dto.CustomerKey;
import com.org.somak.datastore.client.dto.Product;
import com.org.somak.datastore.client.dto.ProductKey;
import com.org.somak.datastore.entity.IMemTable;
import com.org.somak.datastore.entity.MemTable;
import com.org.somak.datastore.entity.factory.MultipleEntryMapFactory;
import com.org.somak.datastore.util.Utility;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.TimeUnit;

import static com.codahale.metrics.MetricRegistry.name;


public class App {

    private static final MetricRegistry metrics = new MetricRegistry();
    private final Timer saveData = metrics.timer(name(App.class, "saveData"));

    public String getGreeting() throws InterruptedException {

        Map<CustomerKey, Customer> keylist = createCustomerKeyList();
        Map<ProductKey, Product> pkeylist = createProductList();
        LSMClient<CustomerKey, Customer> client = new LSMClient();
        LSMClient<ProductKey, Product> pclient = new LSMClient();
        final Timer.Context context = saveData.time();


        try {

            for (Map.Entry<CustomerKey, Customer> entry : keylist.entrySet()) {


//                client.saveData("T_CUSTOMER", entry.getKey(), entry.getValue());
            }
            for (Map.Entry<ProductKey, Product> entry : pkeylist.entrySet()) {

                pclient.saveData("T_PRODUCT", entry.getKey(), entry.getValue());
            }

        } finally {
            context.stop();
        }


        ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics).build();
        reporter.start(5, TimeUnit.SECONDS);
        reporter.report();

        return "Hello World!";

    }

    private Map<ProductKey, Product> createProductList() {

        String filepath = "C:\\somak\\distributed-data-processing\\datastore\\app\\src\\main\\resources\\datastore\\product.csv";
        Map<ProductKey, Product> map = new HashMap<>();
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filepath))) {

            String line = null;
            List<String> collection = new ArrayList<String>();
            int count = 0;

            while ((line = reader.readLine()) != null) {
                String[] array = line.trim().split(",");
                ProductKey key = ProductKey
                        .builder()
                        .productName(array[0])
                        .build();
                Product product = Product
                        .builder()
                        .productDetails(array[1])
                        .price(Double.parseDouble(array[2]))
                        .units(Integer.parseInt(array[3]))
                        .build();

                map.put(key, product);
            }
        } catch (IOException exception) {

        }

        return map;

    }

    private Map<CustomerKey, Customer> createCustomerKeyList() {

        Map<CustomerKey, Customer> cMap = new HashMap<>();

        String filepath = "C:\\somak\\distributed-data-processing\\datastore\\app\\src\\main\\resources\\datastore\\customer.csv";
        Map<ProductKey, Product> map = new HashMap<>();
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filepath))) {

            String line = null;
            List<String> collection = new ArrayList<String>();
            int count = 0;

            while ((line = reader.readLine()) != null) {
                String[] array = line.trim().split(",");
                CustomerKey key = CustomerKey
                        .builder()
                        .customerId(array[0])
                        .build();
                Customer customer = Customer
                        .builder()
                        .customerBirthDate(array[3])
                        .customerName(array[1])
                        .gender(array[2])
                        .build();

                cMap.put(key, customer);
            }
        } catch (IOException exception) {

        }

        return cMap;
    }


    public static void main(String[] args) throws IOException, InterruptedException {

//        String fileName = "C:\\somak\\distributed-data-processing\\journal\\T_PRODUCT\\0001_FILE_OUTPUT.bin";
////        readFromFile(fileName);
//        Path.of(Utility.getSerializedOutputDirectoryName("T_CUSTOMER")).toFile().delete();
//        Path.of(Utility.getSerializedOutputDirectoryName("T_PRODUCT")).toFile().delete();

        Runner runner = new Runner();
        runner.execute();
        TimeUnit.SECONDS.sleep(10);
//        runner.preCleanUp();

//        System.out.println(new App().getGreeting());
    }
    private static void readFromFile(String fileName) throws FileNotFoundException {
        Kryo kryo = new Kryo();
        Input input = new Input(new FileInputStream(fileName));
        TreeMap object2 = kryo.readObject(input, TreeMap.class);
        input.close();
    }
}
